name: Build Flutter App Bundle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: staging # Die Umgebung, die verwendet werden soll.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4' # Oder deine bevorzugte Flutter-Version

      - name: Change directory to project root and get dependencies
        run: cd dlrg_weeze_manager && flutter pub get

      - name: Check Flutter Doctor
        run: flutter doctor -v

      # ðŸ”¹ Keystore entschlÃ¼sseln und speichern
      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > dlrg_weeze_manager/android/app/keystore.jks

      # ðŸ”¹ `key.properties` Datei erstellen
      - name: Create key.properties
        run: |
          echo "storeFile=keystore.jks" > dlrg_weeze_manager/android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> dlrg_weeze_manager/android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> dlrg_weeze_manager/android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> dlrg_weeze_manager/android/key.properties

      # ðŸ”¹ App Bundle fÃ¼r Google Play Store erstellen
      - name: Build App Bundle
        run: flutter build appbundle --release
        working-directory: dlrg_weeze_manager

      # ðŸ”¹ App Bundle als Artifact hochladen
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: DLRG Community Manager.aab
          path: dlrg_weeze_manager/build/app/outputs/bundle/release/app-release.aab
