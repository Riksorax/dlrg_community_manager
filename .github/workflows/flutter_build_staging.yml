name: Build Flutter Release App Bundle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    # Umgebung kann beibehalten werden, wenn Secrets dort definiert sind
    # environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Neueste Version verwenden

      - name: Set up Java
        uses: actions/setup-java@v4 # Neueste Version verwenden
        with:
          distribution: 'zulu'
          java-version: '17' # Sicherstellen, dass dies fÃ¼r Android Gradle Plugin passt

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Empfohlen: stabilen Channel verwenden oder spezifische Version wie zuvor
          # flutter-version: '3.27.4' # Oder deine bevorzugte Flutter-Version

      - name: Change directory to project root and get dependencies
        # WICHTIG: Stelle sicher, dass 'dlrg-community-manager' der korrekte Name deines Flutter-Projektordners im Repo ist
        run: cd dlrg-community-manager && flutter pub get

      - name: Check Flutter Doctor
        # FÃ¼hre doctor im Projektverzeichnis aus, um sicherzustellen, dass alles passt
        run: flutter doctor -v
        working-directory: dlrg-community-manager

      # ðŸ”¹ Release Keystore entschlÃ¼sseln und im Projekt-Root speichern
      - name: Decode Release Keystore
        run: |
          echo "Decoding keystore..."
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > dlrg_weeze_manager/release.jks
          echo "Keystore decoded successfully."
        # WICHTIG: Ersetze ANDROID_KEYSTORE_BASE64 durch den exakten Namen deines Secrets, falls anders.

      # ðŸ”¹ `key.properties` Datei im Projekt-Root erstellen (mit korrekten Property-Namen)
      - name: Create key.properties for Release
        run: |
          echo "Creating key.properties..."
          # Schreibe in das Projektverzeichnis (dlrg-community-manager)
          echo "releaseStoreFile=release.jks" > dlrg-community-manager/key.properties
          echo "releaseStorePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> dlrg-community-manager/key.properties
          echo "releaseKeyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> dlrg-community-manager/key.properties
          echo "releaseKeyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> dlrg-community-manager/key.properties
          echo "key.properties created successfully."
        # WICHTIG: Stelle sicher, dass die Secret-Namen hier exakt mit deinen GitHub Secrets Ã¼bereinstimmen.

      # ðŸ”¹ App Bundle fÃ¼r Google Play Store erstellen
      - name: Build Release App Bundle
        run: flutter build appbundle --release
        working-directory: dlrg-community-manager # Sicherstellen, dass im Projektordner ausgefÃ¼hrt wird

      # ðŸ”¹ App Bundle als Artifact hochladen
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4 # Neueste Version verwenden
        with:
          name: DLRG-Community-Manager-Release # Artefaktname ohne Leerzeichen ist oft besser
          # Pfad relativ zum Workspace-Root
          path: dlrg-community-manager/build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error # Fehler werfen, wenn Bundle nicht gefunden wird
          retention-days: 7 # Wie lange das Artefakt gespeichert werden soll (optional)
