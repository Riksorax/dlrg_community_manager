name: Build Flutter Release App Bundle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    # environment: staging # Beibehalten, falls Secrets hier definiert sind

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Schritt fÃ¼r 'pub get' direkt im Root ausfÃ¼hren
      - name: Get Flutter dependencies
        run: flutter pub get
        # Kein working-directory nÃ¶tig, lÃ¤uft im Root

      # Schritt fÃ¼r 'doctor' direkt im Root ausfÃ¼hren
      - name: Check Flutter Doctor
        run: flutter doctor -v
        # Kein working-directory nÃ¶tig

      # ðŸ”¹ Release Keystore entschlÃ¼sseln und im Root speichern
      - name: Decode Release Keystore
        run: |
          echo "Decoding keystore..."
          # Schreibe direkt ins Root-Verzeichnis
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > release-key.jks
          echo "Keystore decoded successfully."

      # ðŸ”¹ `key.properties` Datei im Root erstellen
      - name: Create key.properties for Release
        run: |
          echo "Creating key.properties..."
          # Schreibe direkt ins Root-Verzeichnis
          echo "releaseStoreFile=release-key.jks" > key.properties
          echo "releaseStorePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> key.properties
          echo "releaseKeyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> key.properties
          echo "releaseKeyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> key.properties
          echo "key.properties created successfully."

      # ðŸ”¹ App Bundle im Root erstellen
      - name: Build Release App Bundle
        run: flutter build appbundle --release
        # Kein working-directory nÃ¶tig

      # ðŸ”¹ App Bundle als Artifact hochladen (Pfad angepasst)
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DLRG-Community-Manager-Release
          # Pfad ohne das Unterverzeichnis
          path: build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error
          retention-days: 7
