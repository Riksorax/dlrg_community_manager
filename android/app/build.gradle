import java.util.Properties
import java.io.FileInputStream

plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Lade Release-Keystore-Properties, falls die Datei existiert
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties") // Bleibt im Projekt-Root
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    // Setze einen eindeutigen Namespace für deine App
    namespace = "app.dlrg_cm.dlrgcommunitymanager" // <- ÄNDERN!
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // KEINE explizite Debug-Konfiguration mehr nötig! Gradle macht das automatisch.

        release {
            // Lese Konfiguration aus key.properties, nur wenn die Datei existiert
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['releaseStoreFile']) // Eindeutiger Name!
                storePassword keystoreProperties['releaseStorePassword'] // Eindeutiger Name!
                keyAlias keystoreProperties['releaseKeyAlias']         // Eindeutiger Name!
                keyPassword keystoreProperties['releaseKeyPassword']     // Eindeutiger Name!
            } else {
                // Optional: Fallback oder Fehlermeldung, falls key.properties für Release-Build fehlt
                // buildConfigField "boolean", "SIGNED_WITH_RELEASE_KEY", "false" // Beispiel
                println("Warning: key.properties not found for release signing!")
            }
        }
    }

    defaultConfig {
        applicationId "app.dlrg_cm.dlrgcommunitymanager"
        minSdk = flutter.minSdkVersion // Nur diese Zeile für minSdk
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        // minSdkVersion 23 // <- Diese Zeile entfernen (redundant)
    }

    buildTypes {
        debug {
            // KEINE signingConfig hier nötig! Wird automatisch signiert.
            debuggable true
        }
        release {
            // WICHTIG: Nutze die release signingConfig!
            signingConfig signingConfigs.release // <- GEÄNDERT!
            // Behalte Proguard / R8 bei
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Optional: Weitere Release-Optimierungen
            // shrinkResources true // Z.B. ungenutzte Resourcen entfernen
        }
    }
}

flutter {
    source = "../.."
}